{"ast":null,"code":"var _jsxFileName = \"/Users/madisontaskett/gitRepos/reallifeperktree/src/pages/login/component/login/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport \"../../styles/index.scss\";\nimport { authenticateUserLogin } from \"../../../../api/user\";\nexport default function Login(props) {\n  const {\n    0: wrongPasswordOrUsername,\n    1: setWrongPasswordOrUsername\n  } = useState(false);\n  const {\n    0: emptyPasswordOrUsername,\n    1: setEmptyPasswordOrUsername\n  } = useState(false);\n  const {\n    0: username,\n    1: setUsername\n  } = useState(\"\");\n  const {\n    0: password,\n    1: setPassword\n  } = useState(\"\"); // When username input value is changed update the state\n\n  function handleChangeUsername(e) {\n    setUsername(e.target.value);\n  } // When password input value is changed update the state\n\n\n  function handleChangePassword(e) {\n    setPassword(e.target.value);\n  } // when submitting call authenticateUserLogin to make the request to the server\n\n\n  function onSubmit(e) {\n    e.preventDefault(); //If the emptyPasswordOrUsername error message was already shown -> hide it\n\n    emptyPasswordOrUsername && setEmptyPasswordOrUsername(false);\n    console.log(username, password); //if username and password both have strings with value run the authenticateUserLogin function otherwise show error message\n\n    username != \"\" && password != \"\" ? authenticateUserLogin(username, password, res => {\n      res.wrongPasswordOrUsername && setWrongPasswordOrUsername(res.wrongPasswordOrUsername);\n    }) : setEmptyPasswordOrUsername(true);\n  }\n\n  return __jsx(\"div\", {\n    className: \"login-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, wrongPasswordOrUsername && __jsx(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"Username or password was incorrect\"), emptyPasswordOrUsername && __jsx(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"Username or password is empty\"), __jsx(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"username\",\n    placeholder: \"Username\",\n    name: \"username\",\n    onChange: handleChangeUsername,\n    value: username,\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"password\",\n    placeholder: \"Password\",\n    name: \"password\",\n    onChange: handleChangePassword,\n    value: password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  })), __jsx(\"button\", {\n    className: \"btn\",\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"Login\"));\n}","map":{"version":3,"sources":["/Users/madisontaskett/gitRepos/reallifeperktree/src/pages/login/component/login/index.tsx"],"names":["React","useState","authenticateUserLogin","Login","props","wrongPasswordOrUsername","setWrongPasswordOrUsername","emptyPasswordOrUsername","setEmptyPasswordOrUsername","username","setUsername","password","setPassword","handleChangeUsername","e","target","value","handleChangePassword","onSubmit","preventDefault","console","log","res"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,OAAO,yBAAP;AACA,SAASC,qBAAT,QAAsC,sBAAtC;AAEA,eAAe,SAASC,KAAT,CAAgBC,KAAhB,EAAuB;AACpC,QAAM;AAAA,OAACC,uBAAD;AAAA,OAA0BC;AAA1B,MAAwDL,QAAQ,CAAC,KAAD,CAAtE;AACA,QAAM;AAAA,OAACM,uBAAD;AAAA,OAA0BC;AAA1B,MAAwDP,QAAQ,CAAC,KAAD,CAAtE;AACA,QAAM;AAAA,OAACQ,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACU,QAAD;AAAA,OAAWC;AAAX,MAA0BX,QAAQ,CAAC,EAAD,CAAxC,CAJoC,CAMpC;;AACA,WAASY,oBAAT,CAA8BC,CAA9B,EAAiC;AAC/BJ,IAAAA,WAAW,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACD,GATmC,CAWpC;;;AACA,WAASC,oBAAT,CAA8BH,CAA9B,EAAiC;AAC/BF,IAAAA,WAAW,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACD,GAdmC,CAgBpC;;;AACA,WAASE,QAAT,CAAkBJ,CAAlB,EAAqB;AACnBA,IAAAA,CAAC,CAACK,cAAF,GADmB,CAGnB;;AACAZ,IAAAA,uBAAuB,IAAIC,0BAA0B,CAAE,KAAF,CAArD;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYZ,QAAZ,EAAsBE,QAAtB,EALmB,CAOnB;;AACAF,IAAAA,QAAQ,IAAI,EAAZ,IAAkBE,QAAQ,IAAI,EAA9B,GACAT,qBAAqB,CAACO,QAAD,EAAWE,QAAX,EAAsBW,GAAD,IAAS;AAC/CA,MAAAA,GAAG,CAACjB,uBAAJ,IAA+BC,0BAA0B,CAACgB,GAAG,CAACjB,uBAAL,CAAzD;AACD,KAFkB,CADrB,GAIIG,0BAA0B,CAAC,IAAD,CAJ9B;AAKD;;AAED,SACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGH,uBAAuB,IACtB;AAAG,IAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAJJ,EAMGE,uBAAuB,IACtB;AAAG,IAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAPJ,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,QAAQ,EAAEM,oBAJZ;AAKE,IAAA,KAAK,EAAEJ,QALT;AAME,IAAA,SAAS,MANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,QAAQ,EAAEQ,oBAJZ;AAKE,IAAA,KAAK,EAAEN,QALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CATF,EA0BE;AAAQ,IAAA,SAAS,EAAC,KAAlB;AAAwB,IAAA,OAAO,EAAEO,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA1BF,CADF;AA8BD","sourcesContent":["import React, {useState} from \"react\";\n\nimport \"../../styles/index.scss\";\nimport { authenticateUserLogin } from \"../../../../api/user\";\n\nexport default function Login (props) {\n  const [wrongPasswordOrUsername, setWrongPasswordOrUsername] = useState(false);\n  const [emptyPasswordOrUsername, setEmptyPasswordOrUsername] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  // When username input value is changed update the state\n  function handleChangeUsername(e) {\n    setUsername(e.target.value)\n  }\n\n  // When password input value is changed update the state\n  function handleChangePassword(e) {\n    setPassword(e.target.value)\n  }\n\n  // when submitting call authenticateUserLogin to make the request to the server\n  function onSubmit(e) {\n    e.preventDefault();\n\n    //If the emptyPasswordOrUsername error message was already shown -> hide it\n    emptyPasswordOrUsername && setEmptyPasswordOrUsername (false )\n    console.log(username, password);\n    \n    //if username and password both have strings with value run the authenticateUserLogin function otherwise show error message\n    username != \"\" && password != \"\" ? \n    authenticateUserLogin(username, password, (res) => {\n        res.wrongPasswordOrUsername && setWrongPasswordOrUsername(res.wrongPasswordOrUsername) \n      })\n      : setEmptyPasswordOrUsername(true)\n  }\n\n  return (\n    <div className=\"login-container\">\n      {/* <h3>Login</h3>\n      <p>Welcome back!</p> */}\n      {wrongPasswordOrUsername && (\n        <p className=\"error\">Username or password was incorrect</p>\n      )}\n      {emptyPasswordOrUsername && (\n        <p className=\"error\">Username or password is empty</p>\n      )}\n      <form>\n        <input\n          type=\"username\"\n          placeholder=\"Username\"\n          name=\"username\"\n          onChange={handleChangeUsername}\n          value={username}\n          autoFocus\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          name=\"password\"\n          onChange={handleChangePassword}\n          value={password}\n        />\n      </form>\n      <button className=\"btn\" onClick={onSubmit}>Login</button>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}