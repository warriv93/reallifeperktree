{"ast":null,"code":"// MANAGE CACHE VALUE\nimport { reactLocalStorage } from \"reactjs-localstorage\"; // reactLocalStorage.set(\"var\", true);\n// reactLocalStorage.get(\"var\", true);\n// reactLocalStorage.setObject(\"var\", { test: \"test\" });\n// reactLocalStorage.getObject(\"var\");\n// reactLocalStorage.remove(\"var\");\n// reactLocalStorage.clear();\n// API Guide\n// --- https://www.npmjs.com/package/reactjs-localstorage\n// reactLocalStorage.set(key, value)\n// reactLocalStorage.get(key, deafultValue=undefined, silent=true)\n// reactLocalStorage.setObject(key, object)\n// reactLoacStorage.getObject(key, defaultValue={}, silent=true)\n// reactLocalStorage.remove(key)\n// reactLocalStorage.clear()\n// silent:\n// true: Will not throw exception instead will return defaultValue\n// false: Will throw exception\n\nvar isClient = typeof document !== 'undefined';\n\nfunction setUserLoggedin(user) {\n  var loggedin; //check so that it is run on a client\n\n  if (isClient) {\n    reactLocalStorage.set(\"loggedin\", true);\n    loggedin = reactLocalStorage.get(\"loggedin\", true); //check if userdata is empty, if not remove content and set a new obj\n\n    var userdata = reactLocalStorage.getObject(\"userdata\");\n    Object.keys(userdata).length !== 0 && userdata.constructor === Object && reactLocalStorage.remove(\"userdata\");\n    reactLocalStorage.setObject(\"userdata\", user);\n    getUserData(function (res) {\n      return console.info(\"LOCALSTORAGE: \", res, \"loggedin: \", loggedin);\n    });\n  }\n\n  return loggedin;\n}\n\nfunction getUserLoggedin() {\n  var loggedin;\n\n  if (isClient) {\n    loggedin = reactLocalStorage.get(\"loggedin\", true);\n  }\n\n  return loggedin == \"true\" ? true : false || null;\n}\n\nfunction getUserData(callback) {\n  var userdata;\n\n  if (isClient) {\n    userdata = reactLocalStorage.getObject(\"userdata\");\n  } //sometimes it returns as an array, since it might get overwriten / added to in the signin process\n\n\n  callback(userdata.length > 0 ? userdata[0] : userdata || null);\n}\n\nfunction logout() {\n  if (isClient) {\n    reactLocalStorage.remove(\"userdata\");\n    reactLocalStorage.set(\"loggedin\", false);\n  }\n\n  return \"user logged out\";\n}\n\nexport { setUserLoggedin, getUserLoggedin, getUserData, logout };","map":{"version":3,"sources":["/Users/madisontaskett/gitRepos/reallifeperktree/src/api/userlocalstorage.tsx"],"names":["reactLocalStorage","isClient","document","setUserLoggedin","user","loggedin","set","get","userdata","getObject","Object","keys","length","constructor","remove","setObject","getUserData","res","console","info","getUserLoggedin","callback","logout"],"mappings":"AAAA;AAEA,SAASA,iBAAT,QAAkC,sBAAlC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,IAAMC,QAAQ,GAAG,OAAOC,QAAP,KAAoB,WAArC;;AAGA,SAASC,eAAT,CAA0BC,IAA1B,EAAgD;AAC9C,MAAIC,QAAJ,CAD8C,CAE5C;;AACF,MAAIJ,QAAJ,EAAc;AACZD,IAAAA,iBAAiB,CAACM,GAAlB,CAAsB,UAAtB,EAAkC,IAAlC;AACAD,IAAAA,QAAQ,GAAGL,iBAAiB,CAACO,GAAlB,CAAsB,UAAtB,EAAkC,IAAlC,CAAX,CAFY,CAIZ;;AACA,QAAIC,QAAQ,GAAGR,iBAAiB,CAACS,SAAlB,CAA4B,UAA5B,CAAf;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsBI,MAAtB,KAAiC,CAAjC,IAAsCJ,QAAQ,CAACK,WAAT,KAAyBH,MAA/D,IAAyEV,iBAAiB,CAACc,MAAlB,CAAyB,UAAzB,CAAzE;AACAd,IAAAA,iBAAiB,CAACe,SAAlB,CAA4B,UAA5B,EAAwCX,IAAxC;AACAY,IAAAA,WAAW,CAAC,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,IAAR,CAAa,gBAAb,EAA+BF,GAA/B,EAAoC,YAApC,EAAkDZ,QAAlD,CAAJ;AAAA,KAAJ,CAAX;AACD;;AACD,SAAOA,QAAP;AACD;;AAED,SAASe,eAAT,GAAoC;AAClC,MAAIf,QAAJ;;AACA,MAAIJ,QAAJ,EAAc;AACZI,IAAAA,QAAQ,GAAGL,iBAAiB,CAACO,GAAlB,CAAsB,UAAtB,EAAkC,IAAlC,CAAX;AACD;;AACD,SAAOF,QAAQ,IAAI,MAAZ,GAAqB,IAArB,GAA4B,SAAS,IAA5C;AACD;;AAED,SAASW,WAAT,CAAqBK,QAArB,EAA+B;AAC7B,MAAIb,QAAJ;;AACA,MAAIP,QAAJ,EAAc;AACZO,IAAAA,QAAQ,GAAGR,iBAAiB,CAACS,SAAlB,CAA4B,UAA5B,CAAX;AACD,GAJ4B,CAK7B;;;AACAY,EAAAA,QAAQ,CAAEb,QAAQ,CAACI,MAAT,GAAkB,CAAlB,GAAsBJ,QAAQ,CAAC,CAAD,CAA9B,GAAoCA,QAAQ,IAAI,IAAlD,CAAR;AACD;;AAED,SAASc,MAAT,GAAkB;AAChB,MAAIrB,QAAJ,EAAc;AACZD,IAAAA,iBAAiB,CAACc,MAAlB,CAAyB,UAAzB;AACAd,IAAAA,iBAAiB,CAACM,GAAlB,CAAsB,UAAtB,EAAkC,KAAlC;AACD;;AACD,SAAO,iBAAP;AACD;;AAED,SAASH,eAAT,EAA0BiB,eAA1B,EAA2CJ,WAA3C,EAAwDM,MAAxD","sourcesContent":["// MANAGE CACHE VALUE\n\nimport { reactLocalStorage } from \"reactjs-localstorage\";\n\n// reactLocalStorage.set(\"var\", true);\n// reactLocalStorage.get(\"var\", true);\n// reactLocalStorage.setObject(\"var\", { test: \"test\" });\n// reactLocalStorage.getObject(\"var\");\n// reactLocalStorage.remove(\"var\");\n// reactLocalStorage.clear();\n\n// API Guide\n// --- https://www.npmjs.com/package/reactjs-localstorage\n\n// reactLocalStorage.set(key, value)\n// reactLocalStorage.get(key, deafultValue=undefined, silent=true)\n// reactLocalStorage.setObject(key, object)\n// reactLoacStorage.getObject(key, defaultValue={}, silent=true)\n// reactLocalStorage.remove(key)\n// reactLocalStorage.clear()\n\n// silent:\n// true: Will not throw exception instead will return defaultValue\n// false: Will throw exception\nconst isClient = typeof document !== 'undefined'\n\n\nfunction setUserLoggedin (user: object): String {\n  let loggedin: String;\n    //check so that it is run on a client\n  if (isClient) {\n    reactLocalStorage.set(\"loggedin\", true);\n    loggedin = reactLocalStorage.get(\"loggedin\", true);\n\n    //check if userdata is empty, if not remove content and set a new obj\n    let userdata = reactLocalStorage.getObject(\"userdata\")\n    Object.keys(userdata).length !== 0 && userdata.constructor === Object && reactLocalStorage.remove(\"userdata\")\n    reactLocalStorage.setObject(\"userdata\", user);\n    getUserData(res => console.info(\"LOCALSTORAGE: \", res, \"loggedin: \", loggedin))\n  }\n  return loggedin\n}\n\nfunction getUserLoggedin(): Boolean {\n  let loggedin: string;\n  if (isClient) {\n    loggedin = reactLocalStorage.get(\"loggedin\", true)\n  }\n  return loggedin == \"true\" ? true : false || null;\n}\n\nfunction getUserData(callback) {\n  let userdata;\n  if (isClient) {\n    userdata = reactLocalStorage.getObject(\"userdata\");\n  }\n  //sometimes it returns as an array, since it might get overwriten / added to in the signin process\n  callback( userdata.length > 0 ? userdata[0] : userdata || null);\n}\n\nfunction logout() {\n  if (isClient) {\n    reactLocalStorage.remove(\"userdata\");\n    reactLocalStorage.set(\"loggedin\", false);\n  }\n  return \"user logged out\"\n}\n\nexport { setUserLoggedin, getUserLoggedin, getUserData, logout };\n"]},"metadata":{},"sourceType":"module"}