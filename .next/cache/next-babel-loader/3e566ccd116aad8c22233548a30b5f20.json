{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/madisontaskett/gitRepos/reallifeperktree/src/pages/perktree.tsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport Perk from '../components/Perk';\nimport '../style/perktree.scss';\n\nvar perktree =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(perktree, _Component);\n\n  function perktree(props) {\n    var _this;\n\n    _classCallCheck(this, perktree);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(perktree).call(this, props));\n    _this.state = {\n      perkLevelList: []\n    };\n    return _this;\n  } //save perkLevel to state from each perk\n\n\n  _createClass(perktree, [{\n    key: \"updatePerkLevelList\",\n    value: function updatePerkLevelList(perkLevel) {\n      // check if perklevel with same title as the new one exist in array\n      var oldPerkLevel = this.state.perkLevelList.find(function (perklevelitem) {\n        return perklevelitem.title == perkLevel.title;\n      }); //if exist check position in array and replace with new perklevel\n\n      if (oldPerkLevel) {\n        //get index in array of old item\n        this.state.perkLevelList[this.state.perkLevelList.indexOf(oldPerkLevel)] = perkLevel;\n      } // not exist in array just add it to the end of the array\n      else {\n          this.state.perkLevelList.push(perkLevel);\n        }\n    }\n  }, {\n    key: \"checkPerkLevels\",\n    value: function checkPerkLevels() {\n      console.log(\"perkLevelList\", this.state.perkLevelList);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"perktree-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, __jsx(Perk, {\n        updatePerkLevelList: function updatePerkLevelList(perkLevel) {\n          return _this2.updatePerkLevelList(perkLevel);\n        },\n        title: \"Strength\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), __jsx(Perk, {\n        updatePerkLevelList: function updatePerkLevelList(perkLevel) {\n          return _this2.updatePerkLevelList(perkLevel);\n        },\n        title: \"Endurance\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), __jsx(Perk, {\n        updatePerkLevelList: function updatePerkLevelList(perkLevel) {\n          return _this2.updatePerkLevelList(perkLevel);\n        },\n        title: \"Agility\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }), __jsx(Perk, {\n        updatePerkLevelList: function updatePerkLevelList(perkLevel) {\n          return _this2.updatePerkLevelList(perkLevel);\n        },\n        title: \"Charisma\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), __jsx(Perk, {\n        updatePerkLevelList: function updatePerkLevelList(perkLevel) {\n          return _this2.updatePerkLevelList(perkLevel);\n        },\n        title: \"Intelligence\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      })), __jsx(\"button\", {\n        className: \"btn btn-success\",\n        onClick: function onClick() {\n          return _this2.checkPerkLevels();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"CLICK ME\"));\n    }\n  }]);\n\n  return perktree;\n}(Component);\n\nexport { perktree as default };","map":{"version":3,"sources":["/Users/madisontaskett/gitRepos/reallifeperktree/src/pages/perktree.tsx"],"names":["React","Component","Layout","Perk","perktree","props","state","perkLevelList","perkLevel","oldPerkLevel","find","perklevelitem","title","indexOf","push","console","log","updatePerkLevelList","checkPerkLevels"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AAEA,OAAO,wBAAP;;IAEqBC,Q;;;;;AAEjB,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,kFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAc;AACVC,MAAAA,aAAa,EAAE;AADL,KAAd;AAHe;AAMlB,G,CAED;;;;;wCACoBC,S,EAAW;AAC3B;AACA,UAAIC,YAAY,GAAG,KAAKH,KAAL,CAAWC,aAAX,CAAyBG,IAAzB,CAA+B,UAACC,aAAD,EAAmB;AACjE,eAAOA,aAAa,CAACC,KAAd,IAAuBJ,SAAS,CAACI,KAAxC;AACH,OAFkB,CAAnB,CAF2B,CAM3B;;AACA,UAAIH,YAAJ,EAAkB;AACd;AACA,aAAKH,KAAL,CAAWC,aAAX,CAAyB,KAAKD,KAAL,CAAWC,aAAX,CAAyBM,OAAzB,CAAiCJ,YAAjC,CAAzB,IAA2ED,SAA3E;AACH,OAHD,CAIA;AAJA,WAKK;AACD,eAAKF,KAAL,CAAWC,aAAX,CAAyBO,IAAzB,CAA8BN,SAA9B;AACH;AACJ;;;sCAEiB;AACdO,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,KAAKV,KAAL,CAAWC,aAAxC;AACH;;;6BAGQ;AAAA;;AACL,aACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,IAAD;AAAM,QAAA,mBAAmB,EAAE,6BAACC,SAAD;AAAA,iBAAe,MAAI,CAACS,mBAAL,CAAyBT,SAAzB,CAAf;AAAA,SAA3B;AAA+E,QAAA,KAAK,EAAE,UAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,MAAC,IAAD;AAAM,QAAA,mBAAmB,EAAE,6BAACA,SAAD;AAAA,iBAAe,MAAI,CAACS,mBAAL,CAAyBT,SAAzB,CAAf;AAAA,SAA3B;AAA+E,QAAA,KAAK,EAAE,WAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,MAAC,IAAD;AAAM,QAAA,mBAAmB,EAAE,6BAACA,SAAD;AAAA,iBAAe,MAAI,CAACS,mBAAL,CAAyBT,SAAzB,CAAf;AAAA,SAA3B;AAA+E,QAAA,KAAK,EAAE,SAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAII,MAAC,IAAD;AAAM,QAAA,mBAAmB,EAAE,6BAACA,SAAD;AAAA,iBAAe,MAAI,CAACS,mBAAL,CAAyBT,SAAzB,CAAf;AAAA,SAA3B;AAA+E,QAAA,KAAK,EAAE,UAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAKI,MAAC,IAAD;AAAM,QAAA,mBAAmB,EAAE,6BAACA,SAAD;AAAA,iBAAe,MAAI,CAACS,mBAAL,CAAyBT,SAAzB,CAAf;AAAA,SAA3B;AAA+E,QAAA,KAAK,EAAE,cAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CADJ,EAQI;AAAQ,QAAA,SAAS,EAAC,iBAAlB;AAAoC,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACU,eAAL,EAAN;AAAA,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARJ,CADJ;AAYH;;;;EA9CiCjB,S;;SAAjBG,Q","sourcesContent":["import React, { Component } from 'react'\nimport Layout from '../components/Layout';\nimport Perk from '../components/Perk';\n\nimport '../style/perktree.scss';\n\nexport default class perktree extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = ({\n            perkLevelList: []\n        })\n    }\n\n    //save perkLevel to state from each perk\n    updatePerkLevelList(perkLevel) {\n        // check if perklevel with same title as the new one exist in array\n        let oldPerkLevel = this.state.perkLevelList.find( (perklevelitem) => {\n            return perklevelitem.title == perkLevel.title\n        });\n\n        //if exist check position in array and replace with new perklevel\n        if (oldPerkLevel) {\n            //get index in array of old item\n            this.state.perkLevelList[this.state.perkLevelList.indexOf(oldPerkLevel)] = perkLevel\n        }\n        // not exist in array just add it to the end of the array\n        else {\n            this.state.perkLevelList.push(perkLevel) \n        }\n    }\n    \n    checkPerkLevels() {\n        console.log(\"perkLevelList\", this.state.perkLevelList);\n    }\n    \n\n    render() {\n        return (\n            <Layout>\n                <div className=\"perktree-container\">\n                    <Perk updatePerkLevelList={(perkLevel) => this.updatePerkLevelList(perkLevel)} title={\"Strength\"} />\n                    <Perk updatePerkLevelList={(perkLevel) => this.updatePerkLevelList(perkLevel)} title={\"Endurance\"} />\n                    <Perk updatePerkLevelList={(perkLevel) => this.updatePerkLevelList(perkLevel)} title={\"Agility\"} />\n                    <Perk updatePerkLevelList={(perkLevel) => this.updatePerkLevelList(perkLevel)} title={\"Charisma\"} />\n                    <Perk updatePerkLevelList={(perkLevel) => this.updatePerkLevelList(perkLevel)} title={\"Intelligence\"} />\n                </div>    \n                <button className=\"btn btn-success\" onClick={() => this.checkPerkLevels()}>CLICK ME</button>\n            </Layout>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}