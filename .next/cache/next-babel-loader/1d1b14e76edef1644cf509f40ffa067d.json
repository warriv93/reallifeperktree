{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/madisontaskett/gitRepos/reallifeperktree/src/pages/perktree.tsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Layout from \"../components/Layout\";\nimport Perk from \"../components/Perk\";\nimport \"../style/perktree.scss\";\n\nvar perktree =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(perktree, _Component);\n\n  function perktree(props) {\n    var _this;\n\n    _classCallCheck(this, perktree);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(perktree).call(this, props));\n    _this.state = {\n      perkLevelList: [],\n      perkList: [\"Strength\", \"Endurance\", \"Agility\", \"Charisma\", \"Intelligence\"]\n    };\n    return _this;\n  } //save perkLevel to state from each perk\n\n\n  _createClass(perktree, [{\n    key: \"updatePerkLevelList\",\n    value: function updatePerkLevelList(perkLevel) {\n      // check if perklevel with same title as the new one exist in array\n      var oldPerkLevel = this.state.perkLevelList.find(function (perklevelitem) {\n        return perklevelitem.title == perkLevel.title;\n      }); //if exist check position in array and replace with new perklevel\n\n      if (oldPerkLevel) {\n        //get index in array of old item\n        this.state.perkLevelList[this.state.perkLevelList.indexOf(oldPerkLevel)] = perkLevel;\n      } // not exist in array just add it to the end of the array\n      else {\n          this.state.perkLevelList.push(perkLevel);\n        }\n    }\n  }, {\n    key: \"checkPerkLevels\",\n    value: function checkPerkLevels() {\n      console.log(\"perkLevelList\", this.state.perkLevelList);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"perktree-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, __jsx(Perk, {\n        updatePerkLevelList: function updatePerkLevelList(perkLevel) {\n          return _this2.updatePerkLevelList(perkLevel);\n        },\n        title: \"Strength\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), __jsx(Perk, {\n        updatePerkLevelList: function updatePerkLevelList(perkLevel) {\n          return _this2.updatePerkLevelList(perkLevel);\n        },\n        title: \"Endurance\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), __jsx(Perk, {\n        updatePerkLevelList: function updatePerkLevelList(perkLevel) {\n          return _this2.updatePerkLevelList(perkLevel);\n        },\n        title: \"Agility\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), __jsx(Perk, {\n        updatePerkLevelList: function updatePerkLevelList(perkLevel) {\n          return _this2.updatePerkLevelList(perkLevel);\n        },\n        title: \"Charisma\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), __jsx(Perk, {\n        updatePerkLevelList: function updatePerkLevelList(perkLevel) {\n          return _this2.updatePerkLevelList(perkLevel);\n        },\n        title: \"Intelligence\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })), __jsx(\"button\", {\n        className: \"btn btn-success\",\n        onClick: function onClick() {\n          return _this2.checkPerkLevels();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"CLICK ME\"));\n    }\n  }]);\n\n  return perktree;\n}(Component);\n\nexport { perktree as default };","map":{"version":3,"sources":["/Users/madisontaskett/gitRepos/reallifeperktree/src/pages/perktree.tsx"],"names":["React","Component","Layout","Perk","perktree","props","state","perkLevelList","perkList","perkLevel","oldPerkLevel","find","perklevelitem","title","indexOf","push","console","log","updatePerkLevelList","checkPerkLevels"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AAEA,OAAO,wBAAP;;IAWqBC,Q;;;;;AACnB,oBAAYC,KAAZ,EAA2B;AAAA;;AAAA;;AACzB,kFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,EADJ;AAEXC,MAAAA,QAAQ,EAAE,CAAC,UAAD,EAAa,WAAb,EAA0B,SAA1B,EAAqC,UAArC,EAAiD,cAAjD;AAFC,KAAb;AAHyB;AAO1B,G,CAED;;;;;wCACoBC,S,EAAqB;AACvC;AACA,UAAIC,YAAY,GAAG,KAAKJ,KAAL,CAAWC,aAAX,CAAyBI,IAAzB,CAA8B,UAAAC,aAAa,EAAI;AAChE,eAAOA,aAAa,CAACC,KAAd,IAAuBJ,SAAS,CAACI,KAAxC;AACD,OAFkB,CAAnB,CAFuC,CAMvC;;AACA,UAAIH,YAAJ,EAAkB;AAChB;AACA,aAAKJ,KAAL,CAAWC,aAAX,CACE,KAAKD,KAAL,CAAWC,aAAX,CAAyBO,OAAzB,CAAiCJ,YAAjC,CADF,IAEID,SAFJ;AAGD,OALD,CAMA;AANA,WAOK;AACH,eAAKH,KAAL,CAAWC,aAAX,CAAyBQ,IAAzB,CAA8BN,SAA9B;AACD;AACF;;;sCAEiB;AAChBO,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,KAAKX,KAAL,CAAWC,aAAxC;AACD;;;6BAEQ;AAAA;;AACP,aACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,IAAD;AACE,QAAA,mBAAmB,EAAE,6BAAAE,SAAS;AAAA,iBAC5B,MAAI,CAACS,mBAAL,CAAyBT,SAAzB,CAD4B;AAAA,SADhC;AAIE,QAAA,KAAK,EAAE,UAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAOE,MAAC,IAAD;AACE,QAAA,mBAAmB,EAAE,6BAAAA,SAAS;AAAA,iBAC5B,MAAI,CAACS,mBAAL,CAAyBT,SAAzB,CAD4B;AAAA,SADhC;AAIE,QAAA,KAAK,EAAE,WAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,EAaE,MAAC,IAAD;AACE,QAAA,mBAAmB,EAAE,6BAAAA,SAAS;AAAA,iBAC5B,MAAI,CAACS,mBAAL,CAAyBT,SAAzB,CAD4B;AAAA,SADhC;AAIE,QAAA,KAAK,EAAE,SAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbF,EAmBE,MAAC,IAAD;AACE,QAAA,mBAAmB,EAAE,6BAAAA,SAAS;AAAA,iBAC5B,MAAI,CAACS,mBAAL,CAAyBT,SAAzB,CAD4B;AAAA,SADhC;AAIE,QAAA,KAAK,EAAE,UAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAnBF,EAyBE,MAAC,IAAD;AACE,QAAA,mBAAmB,EAAE,6BAAAA,SAAS;AAAA,iBAC5B,MAAI,CAACS,mBAAL,CAAyBT,SAAzB,CAD4B;AAAA,SADhC;AAIE,QAAA,KAAK,EAAE,cAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAzBF,CADF,EAiCE;AACE,QAAA,SAAS,EAAC,iBADZ;AAEE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACU,eAAL,EAAN;AAAA,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAjCF,CADF;AA0CD;;;;EA7EmClB,S;;SAAjBG,Q","sourcesContent":["import React, { Component } from \"react\";\nimport Layout from \"../components/Layout\";\nimport Perk from \"../components/Perk\";\n\nimport \"../style/perktree.scss\";\n\ninterface IProps {\n  title?: string;\n}\n\ninterface IState {\n  title?: string;\n  perkLevel: number;\n}\n\nexport default class perktree extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      perkLevelList: [],\n      perkList: [\"Strength\", \"Endurance\", \"Agility\", \"Charisma\", \"Intelligence\"]\n    };\n  }\n\n  //save perkLevel to state from each perk\n  updatePerkLevelList(perkLevel: Function) {\n    // check if perklevel with same title as the new one exist in array\n    let oldPerkLevel = this.state.perkLevelList.find(perklevelitem => {\n      return perklevelitem.title == perkLevel.title;\n    });\n\n    //if exist check position in array and replace with new perklevel\n    if (oldPerkLevel) {\n      //get index in array of old item\n      this.state.perkLevelList[\n        this.state.perkLevelList.indexOf(oldPerkLevel)\n      ] = perkLevel;\n    }\n    // not exist in array just add it to the end of the array\n    else {\n      this.state.perkLevelList.push(perkLevel);\n    }\n  }\n\n  checkPerkLevels() {\n    console.log(\"perkLevelList\", this.state.perkLevelList);\n  }\n\n  render() {\n    return (\n      <Layout>\n        <div className=\"perktree-container\">\n          <Perk\n            updatePerkLevelList={perkLevel =>\n              this.updatePerkLevelList(perkLevel)\n            }\n            title={\"Strength\"}\n          />\n          <Perk\n            updatePerkLevelList={perkLevel =>\n              this.updatePerkLevelList(perkLevel)\n            }\n            title={\"Endurance\"}\n          />\n          <Perk\n            updatePerkLevelList={perkLevel =>\n              this.updatePerkLevelList(perkLevel)\n            }\n            title={\"Agility\"}\n          />\n          <Perk\n            updatePerkLevelList={perkLevel =>\n              this.updatePerkLevelList(perkLevel)\n            }\n            title={\"Charisma\"}\n          />\n          <Perk\n            updatePerkLevelList={perkLevel =>\n              this.updatePerkLevelList(perkLevel)\n            }\n            title={\"Intelligence\"}\n          />\n        </div>\n        <button\n          className=\"btn btn-success\"\n          onClick={() => this.checkPerkLevels()}\n        >\n          CLICK ME\n        </button>\n      </Layout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}