{"ast":null,"code":"var _jsxFileName = \"/Users/madisontaskett/gitRepos/reallifeperktree/src/pages/perktree.tsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Layout from \"../components/Layout\";\nimport Perk from \"../components/Perk\";\nimport \"../style/perktree.scss\";\nexport default class perktree extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      perkLevelList: [],\n      perkList: [\"Strength\", \"Endurance\", \"Agility\", \"Charisma\", \"Intelligence\"]\n    };\n  } //save perkLevel to state from each perk\n\n\n  updatePerkLevelList(perkLevel) {\n    // check if perklevel with same title as the new one exist in array\n    let oldPerkLevel = this.state.perkLevelList.find(perklevelitem => {\n      return perklevelitem.title == perkLevel.title;\n    }); //if exist check position in array and replace with new perklevel\n\n    if (oldPerkLevel) {\n      //get index in array of old item\n      this.state.perkLevelList[this.state.perkLevelList.indexOf(oldPerkLevel)] = perkLevel;\n    } // not exist in array just add it to the end of the array\n    else {\n        this.state.perkLevelList.push(perkLevel);\n      }\n  }\n\n  checkPerkLevels() {\n    console.log(\"perkLevelList\", this.state.perkLevelList);\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"perktree-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, __jsx(Perk, {\n      updatePerkLevelList: perkLevel => this.updatePerkLevelList(perkLevel),\n      title: \"Strength\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), __jsx(Perk, {\n      updatePerkLevelList: perkLevel => this.updatePerkLevelList(perkLevel),\n      title: \"Endurance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), __jsx(Perk, {\n      updatePerkLevelList: perkLevel => this.updatePerkLevelList(perkLevel),\n      title: \"Agility\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), __jsx(Perk, {\n      updatePerkLevelList: perkLevel => this.updatePerkLevelList(perkLevel),\n      title: \"Charisma\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), __jsx(Perk, {\n      updatePerkLevelList: perkLevel => this.updatePerkLevelList(perkLevel),\n      title: \"Intelligence\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), __jsx(\"button\", {\n      className: \"btn btn-success\",\n      onClick: () => this.checkPerkLevels(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"CLICK ME\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/madisontaskett/gitRepos/reallifeperktree/src/pages/perktree.tsx"],"names":["React","Component","Layout","Perk","perktree","constructor","props","state","perkLevelList","perkList","updatePerkLevelList","perkLevel","oldPerkLevel","find","perklevelitem","title","indexOf","push","checkPerkLevels","console","log","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AAEA,OAAO,wBAAP;AAUA,eAAe,MAAMC,QAAN,SAAuBH,SAAvB,CAAiD;AAC9DI,EAAAA,WAAW,CAACC,KAAD,EAAgB;AACzB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,EADJ;AAEXC,MAAAA,QAAQ,EAAE,CAAC,UAAD,EAAa,WAAb,EAA0B,SAA1B,EAAqC,UAArC,EAAiD,cAAjD;AAFC,KAAb;AAID,GAR6D,CAU9D;;;AACAC,EAAAA,mBAAmB,CAACC,SAAD,EAAsB;AACvC;AACA,QAAIC,YAAY,GAAG,KAAKL,KAAL,CAAWC,aAAX,CAAyBK,IAAzB,CAA8BC,aAAa,IAAI;AAChE,aAAOA,aAAa,CAACC,KAAd,IAAuBJ,SAAS,CAACI,KAAxC;AACD,KAFkB,CAAnB,CAFuC,CAMvC;;AACA,QAAIH,YAAJ,EAAkB;AAChB;AACA,WAAKL,KAAL,CAAWC,aAAX,CACE,KAAKD,KAAL,CAAWC,aAAX,CAAyBQ,OAAzB,CAAiCJ,YAAjC,CADF,IAEID,SAFJ;AAGD,KALD,CAMA;AANA,SAOK;AACH,aAAKJ,KAAL,CAAWC,aAAX,CAAyBS,IAAzB,CAA8BN,SAA9B;AACD;AACF;;AAEDO,EAAAA,eAAe,GAAG;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,KAAKb,KAAL,CAAWC,aAAxC;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AACE,MAAA,mBAAmB,EAAEV,SAAS,IAC5B,KAAKD,mBAAL,CAAyBC,SAAzB,CAFJ;AAIE,MAAA,KAAK,EAAE,UAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE,MAAC,IAAD;AACE,MAAA,mBAAmB,EAAEA,SAAS,IAC5B,KAAKD,mBAAL,CAAyBC,SAAzB,CAFJ;AAIE,MAAA,KAAK,EAAE,WAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAaE,MAAC,IAAD;AACE,MAAA,mBAAmB,EAAEA,SAAS,IAC5B,KAAKD,mBAAL,CAAyBC,SAAzB,CAFJ;AAIE,MAAA,KAAK,EAAE,SAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,EAmBE,MAAC,IAAD;AACE,MAAA,mBAAmB,EAAEA,SAAS,IAC5B,KAAKD,mBAAL,CAAyBC,SAAzB,CAFJ;AAIE,MAAA,KAAK,EAAE,UAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBF,EAyBE,MAAC,IAAD;AACE,MAAA,mBAAmB,EAAEA,SAAS,IAC5B,KAAKD,mBAAL,CAAyBC,SAAzB,CAFJ;AAIE,MAAA,KAAK,EAAE,cAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzBF,CADF,EAiCE;AACE,MAAA,SAAS,EAAC,iBADZ;AAEE,MAAA,OAAO,EAAE,MAAM,KAAKO,eAAL,EAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjCF,CADF;AA0CD;;AA7E6D","sourcesContent":["import React, { Component } from \"react\";\nimport Layout from \"../components/Layout\";\nimport Perk from \"../components/Perk\";\n\nimport \"../style/perktree.scss\";\n\ninterface IProps {\n}\n\ninterface IState {\n    perkLevelList: Array,\n    perkList: Array\n}\n\nexport default class perktree extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      perkLevelList: [],\n      perkList: [\"Strength\", \"Endurance\", \"Agility\", \"Charisma\", \"Intelligence\"]\n    };\n  }\n\n  //save perkLevel to state from each perk\n  updatePerkLevelList(perkLevel: Function) {\n    // check if perklevel with same title as the new one exist in array\n    let oldPerkLevel = this.state.perkLevelList.find(perklevelitem => {\n      return perklevelitem.title == perkLevel.title;\n    });\n\n    //if exist check position in array and replace with new perklevel\n    if (oldPerkLevel) {\n      //get index in array of old item\n      this.state.perkLevelList[\n        this.state.perkLevelList.indexOf(oldPerkLevel)\n      ] = perkLevel;\n    }\n    // not exist in array just add it to the end of the array\n    else {\n      this.state.perkLevelList.push(perkLevel);\n    }\n  }\n\n  checkPerkLevels() {\n    console.log(\"perkLevelList\", this.state.perkLevelList);\n  }\n\n  render() {\n    return (\n      <Layout>\n        <div className=\"perktree-container\">\n          <Perk\n            updatePerkLevelList={perkLevel =>\n              this.updatePerkLevelList(perkLevel)\n            }\n            title={\"Strength\"}\n          />\n          <Perk\n            updatePerkLevelList={perkLevel =>\n              this.updatePerkLevelList(perkLevel)\n            }\n            title={\"Endurance\"}\n          />\n          <Perk\n            updatePerkLevelList={perkLevel =>\n              this.updatePerkLevelList(perkLevel)\n            }\n            title={\"Agility\"}\n          />\n          <Perk\n            updatePerkLevelList={perkLevel =>\n              this.updatePerkLevelList(perkLevel)\n            }\n            title={\"Charisma\"}\n          />\n          <Perk\n            updatePerkLevelList={perkLevel =>\n              this.updatePerkLevelList(perkLevel)\n            }\n            title={\"Intelligence\"}\n          />\n        </div>\n        <button\n          className=\"btn btn-success\"\n          onClick={() => this.checkPerkLevels()}\n        >\n          CLICK ME\n        </button>\n      </Layout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}